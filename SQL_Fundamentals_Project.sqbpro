<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/danielmccormick/Downloads/stores (1).db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3197"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,9:maincustomers"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="customers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="98"/><column index="2" value="176"/><column index="3" value="99"/><column index="4" value="101"/><column index="5" value="108"/><column index="6" value="158"/><column index="7" value="127"/><column index="8" value="103"/><column index="9" value="72"/><column index="10" value="67"/><column index="11" value="74"/><column index="12" value="146"/><column index="13" value="64"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="employees" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="2" value="64"/><column index="3" value="59"/><column index="4" value="59"/><column index="5" value="181"/><column index="6" value="65"/><column index="7" value="60"/><column index="8" value="120"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="offices" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="65"/><column index="2" value="80"/><column index="4" value="137"/><column index="5" value="77"/><column index="6" value="69"/><column index="7" value="54"/><column index="8" value="67"/><column index="9" value="51"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="orderdetails" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="77"/><column index="2" value="75"/><column index="3" value="94"/><column index="4" value="59"/><column index="5" value="99"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="orders" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="77"/><column index="2" value="73"/><column index="3" value="75"/><column index="4" value="73"/><column index="5" value="62"/><column index="6" value="300"/><column index="7" value="98"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="payments" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="98"/><column index="2" value="80"/><column index="3" value="77"/><column index="4" value="63"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="productlines" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="98"/><column index="2" value="300"/><column index="3" value="91"/><column index="4" value="40"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="products" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="75"/><column index="2" value="228"/><column index="3" value="98"/><column index="4" value="77"/><column index="5" value="139"/><column index="6" value="300"/><column index="7" value="92"/><column index="8" value="55"/><column index="9" value="47"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">-- CUSTOMERS table contains data about the customers, and is linked to ORDERS through a &quot;One (and only one) to Zero or many&quot;  join  on CUSTOMERNUMBER, EMPLOYEES through a &quot;Zero or many to Zero or one&quot;
-- join on SALESREPEMPLOYEENUMBER to EMPLOYEENUMBER, and PAYMENTS on a &quot;One (and only one) to Zero or one&quot; join on CUSTOMERNUMBER
-- ORDERS table contains data on customers sales orders and is linked to CUSTOMERS through a &quot;Zero or many to One (and only one)&quot; join on CUSTOMERNUMBER, ORDERDETAILS on a &quot;One (and only one) to Zero or one&quot; 
-- JOIN on ORDERNUMBER
-- EMPLOYEES table contains data about the employees and is linked to itself through a &quot;Zero or one to Zero or many&quot; join from EMPLOYEENUMBER to REPORTSTO, CUSTOMERS table through a &quot;Zero or one to Zero or Many&quot; 
-- join on EMPLOYEENUMBER to SALESREPEMPLOYEENUMBER and OFFICES through a &quot;Zero or many to One and only one&quot; join on OFFICECODE
-- PAYMENTS provides data on customer paument records and is linked through a &quot;Zero or onE to One (and only one)&quot; join to CUSTOMERS on CUSTOMERNUMBER
-- ORDERDETAILS contains data on the sales order line for each sales order and is linked to ORDERS through a &quot;Zero or one to One (and only one)&quot; join on ORDERNUMBER, and PRODUCTS through a &quot;Zero or one to One 
-- (and only one)&quot; join on PRODUCTCODE
-- PRODUCTS provides data on a list of scale model cars and is linked to ORDERDETAILS through a &quot;one (and only one) to zero or one&quot; join on PRODUCTCODE, and PRODUCTLINES on a &quot;Zero or many to One (and only one)&quot;
-- join on PRODUCTLINE
-- PRODUCTLINES provides data on a list of product line categories and is linked to PRODUCTS through a &quot;One (and only one) to Zero or many&quot; join on PRODUCTLINE
-- OFFICES table contains data on sales office information and is linked to EMPLOYEES through a &quot;One (and only one) to Zero or many&quot; join on OFFICECODE

SELECT 'Customer' AS table_name, '13' AS number_of_attributes, COUNT(*) AS number_of_rows
     FROM customers
UNION ALL
SELECT 'Products', '9', COUNT(*) 
     FROM products
UNION ALL
SELECT 'ProductLines', '4', COUNT(*) 
     FROM productlines
UNION ALL
SELECT 'Orders', '7', COUNT(*) 
     FROM orders
UNION ALL
SELECT 'OrderDetails', '5', COUNT(*) 
     FROM orderdetails
UNION ALL
SELECT 'Payments', '4', COUNT(*) 
     FROM payments
UNION ALL
SELECT 'Employees', '8', COUNT(*)
  FROM employees
UNION ALL
SELECT 'Offices', '9', COUNT(*) 
     FROM offices;
	 
	 
	 -- Question1 Page 4 Which products should we order more or less of? 
	 -- Low stock is calculated as quantity of each product sold divided by quantity of product in stock. The lowest ten rates will be our top ten items almost out of stock
	 -- Product performance represents the sum of sales per product, quanity ordered times price for each item
	 -- Items that are low in stock and high in sales performance are the priority items for being restocked 
	 -- The biggest question is what is more important for making the decision to purchase more inventory, the sales of the item, or the stock level? Depending on which one you decide the results can be 
	 -- very different 
	
-- Formula for just looking at sales performance
SELECT  p.productCode, p.productName, p.productLine, ROUND((SUM(o.quantityOrdered)*1.0)/ p.quantityInStock,3) stock_rate
	FROM products p
	  JOIN orderdetails o
	      ON p.productCode = o.productCode
 GROUP BY p.productCode
 ORDER BY stock_rate
  LIMIT 10;
  
-- Formula for looking at the in stock rate 
SELECT p.productCode, p.productName, p.productLine, (SUM(o.quantityOrdered)*1.0) * o.priceEach productCode_sales
    FROM orderdetails o
	JOIN products p
	ON o.productCode = p.productCode
	GROUP BY p.productCode
	ORDER by productcode_sales DESC
	LIMIT 25;

-- Formula that combines the two approaches. Whichever is more important, sales performance or stock rate, should go first in the order by portion 
SELECT  p.productCode, p.productName, p.productLine, ROUND((SUM(od.quantityOrdered)*1.0)/ p.quantityInStock,3) stock_rate, (SUM(od.quantityOrdered)*1.0) * od.priceEach productCode_sales
  FROM products p
  JOIN orderdetails od
	    ON p.productCode = od.productCode
GROUP BY p.productCode
ORDER BY productCode_sales DESC, stock_rate;
		

		
-- Guided Project Question 2 Page 5 How Should we match Marketing and Communication Strategies to Customer Behavior? 
-- We must categorize customers as VIP and &quot;less engaged&quot; 
-- VIP bring in the most profit, less engaged bring in less profit 
-- In order to caclulate profit per customer we would need PRODUCTS, ORDERDETAILS, and ORDERS tables 
-- Could get customerNumber Orders, link orders to orderdetails with orderNumber, get quantity ordered and price from orderdetails table to get revenue per customerName
-- then could link orderdetails to products on productCode and do quantity ordered from orderdetails multiplied by buyPrice to get cost per order. Then subtract revenue per order from cost per order 
-- to get profit, and then group by customerID and rank DESC to get the highest profit customers 

SELECT customerNumber, orderNumber
    FROM orders;
	
SELECT orderNumber, productCode, quantityOrdered, priceEach, ((quantityOrdered*1.0)*priceEach)
    FROM orderdetails;

SELECT productCode, buyPrice
     FROM products;
	 
SELECT o.customerNumber, SUM(((od.quantityOrdered*1.0)*od.priceEach) -((od.quantityOrdered*1.0)*(p.buyPrice)))AS profit_per_customer
    FROM (SELECT customerNumber, orderNumber
                      FROM orders)  o
	 JOIN  (SELECT orderNumber, productCode, quantityOrdered, priceEach, ((quantityOrdered*1.0)*priceEach)
                       FROM orderdetails) od
		  ON  o.orderNumber=od.orderNumber
	JOIN (SELECT productCode, buyPrice
                      FROM products) p
		  on  od.productCode=p.productCode
GROUP BY o.customerNumber
 ORDER BY profit_per_customer DESC;
 
 -- a more cleaned up version of the above query 
 
SELECT o.customerNumber, SUM(quantityOrdered*(priceEach-buyPrice)) AS profit_per_customer
    FROM Orders o
	 JOIN orderdetails od
		  ON  o.orderNumber=od.orderNumber
	JOIN products p
		  on  od.productCode=p.productCode
GROUP BY o.customerNumber
 ORDER BY profit_per_customer DESC;
 
 -- Adding a join to the customers table so we can pull in the VIP customers info 
 
 SELECT o.customerNumber, c.contactLastName, c.contactFirstName, c.city, c.country, SUM(quantityOrdered*(priceEach-buyPrice)) AS profit_per_customer
    FROM customers c
	JOIN Orders o
	      ON c.customerNumber = o.customerNumber
	 JOIN orderdetails od
		  ON  o.orderNumber=od.orderNumber
	JOIN products p
		  on  od.productCode=p.productCode
GROUP BY o.customerNumber
 ORDER BY profit_per_customer DESC;
 
 -- Least engaged customers 
  SELECT o.customerNumber, c.contactLastName, c.contactFirstName, c.city, c.country, SUM(quantityOrdered*(priceEach-buyPrice)) AS profit_per_customer
    FROM customers c
	JOIN Orders o
	      ON c.customerNumber = o.customerNumber
	 JOIN orderdetails od
		  ON  o.orderNumber=od.orderNumber
	JOIN products p
		  on  od.productCode=p.productCode
GROUP BY o.customerNumber
 ORDER BY profit_per_customer;
 
 -- Page 7 question 3, how much can we spend on Acquiring new customers? 
 -- Based on provided analysis, it makes sense to use marketing dollars to aquire new customers 
 -- To determine how much to spend on marketing we need to calculate the Customer Lifetime Value (LTV) which represents the average amount of money a customer generates  in profit
 -- To do this we would need to calculate profit and then divide by the total amount of customers to get a average customer LTV value 
 -- can get a count of total customers from customers table, will need to link to orderdetails via orders table 
 -- Looks like the average lifetime value of a customer is just over $39k. This can then be used to calculate how much to spend on Marketing. 
 
 -- CDistinct count of customers 
 SELECT COUNT(DISTINCT customerNumber) 
    FROM customers;
	
-- all time profit 
	SELECT SUM((quantityOrdered*1.0)*(priceEach-buyPrice))
  FROM orderdetails o
   JOIN products p
        ON o.productCode = p.productCode;
  
 -- dividing total all time profit by amount of customers to get customer LTV 
 SELECT ROUND((SUM((quantityOrdered*1.0)*(priceEach-buyPrice)))/(COUNT(DISTINCT c.customerNumber) ),2) AS Customer_LTV
   FROM customers c
   JOIN orders o
     ON c.customerNumber = o.customerNumber
JOIN orderdetails od
  ON o.orderNumber = od.orderNumber
  JOIN products p
     ON od.productCode=p.productCode;
 
 


 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 </sql><current_tab id="0"/></tab_sql></sqlb_project>
